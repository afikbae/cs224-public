.text

	la $a0, expression
	jal print_string
	
	li $a1, 'x'
	jal print_enter
	
	li $v0, 5
	syscall
	
	move $s0, $v0
	
	li $a1, 'y'
	jal print_enter
	
	li $v0, 5
	syscall
	
	move $s1, $v0
	
	li $a1, 'z'
	jal print_enter
	
	li $v0, 5
	syscall
	
	move $s2, $v0
	
	beq $s1, $0, error
	beq $s2, $0, error
	j cont

error:
	la $a0, zeroDiv
	jal print_string
	
	li $v0, 10
	syscall

		
cont:
	addi $t0, $s0, 5
	div $t0, $s1
	mfhi $t0
	div $t0, $s2
	mflo $t0
	
	la $a0, result
	jal print_string
	
	move $a0, $t0
	li $v0, 1
	syscall
	
	li $v0, 10
	syscall


print_string:			# precondition: $a0 contains the address of the string
	li $v0, 4
	syscall
	jr $ra

print_enter:			# precondition: $a1 contains the name of the variable as char
	move $t0, $ra
	la $a0, enter
	jal print_string
	
	move $a0, $a1
	li $v0, 11
	syscall
	
	la $a0, enterCont
	jal print_string
	jr $t0

.data
expression: 	.asciiz "The expression ( ( x + 5 ) % y ) / z will be calculated\n"
enter: 		.asciiz "Please enter the value of "
enterCont: 	.asciiz " : "
result: 	.asciiz "The result is : "
zeroDiv: 	.asciiz "Division by 0!!"
##
## Program1.asm - prints out "hello world"
##
##	a0 - points to the string
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start 

__start:		# execution starts here
	la $a0,str	# put string address into a0
	li $v0,4	# system call to print
	syscall		#   out a string

	li $v0,10  # system call to exit
	syscall	#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
str:	.asciiz "Hello Mustafa\n"
n:	.word	10

##
## end of file Program1.asm

##
## Program2.asm asks user for temperature in Celsius,
##  converts to Fahrenheit, prints the result.
##
##	v0 - reads in Celsius
##	t0 - holds Fahrenheit result
##	a0 - points to output strings
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	mul $t0,$v0,9	# to convert,multiply by 9,
	div $t0,$t0,5	# divide by 5, then
	add $t0,$t0,32	# add 32

	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t0	# print integer result
	li $v0,1		# using syscall 1
	syscall

	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye


#################################
#				#
#     	 data segment		#
#				#
#################################

	.data
prompt:	.asciiz "Enter temperature (Celsius): "
ans1:	.asciiz "The temperature in Fahrenheit is "
endl:	.asciiz "\n"

##
## end of file Program2.asm

##
##	Program3.asm is a loop implementation
##	of the Fibonacci function
##        

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
.globl __start
 
__start:		# execution starts here
	li $a0,2	# to calculate fib(7)
	jal fib		# call fib
	move $a0,$v0	# print result
	li $v0, 1
	syscall

	la $a0,endl	# print newline
	li $v0,4
	syscall

	li $v0,10
	syscall		# bye bye

#------------------------------------------------


fib:	move $v0,$a0	# initialise last element
	blt $a0,2,done	# fib(0)=0, fib(1)=1

	li $t0,0	# second last element
	li $v0,1	# last element

loop:	add $t1,$t0,$v0	# get next value
	move $t0,$v0	# update second last
	move $v0,$t1	# update last element
	sub $a0,$a0,1	# decrement count
	bgt $a0,1,loop	# exit loop when count=0
done:	jr $ra

#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
endl:	.asciiz "\n"

##
## end of Program3.asm
